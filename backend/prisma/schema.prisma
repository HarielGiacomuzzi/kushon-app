generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Publisher {
  id        String   @id @default(uuid())
  name      String   @unique
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  titles Title[]

  @@map("publishers")
}

enum TitleStatus {
  ONGOING
  COMPLETED
  HIATUS
}

model Title {
  id          String      @id @default(uuid())
  name        String
  synopsis    String?
  author      String?
  genre       String?
  slug        String
  coverImage  String?
  status      TitleStatus @default(ONGOING)
  publisherId String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  publisher Publisher @relation(fields: [publisherId], references: [id], onDelete: Restrict)
  volumes   Volume[]
  notificationPreferences NotificationPreference[]

  @@unique([publisherId, name])
  @@unique([publisherId, slug])
  @@map("titles")
}

model Volume {
  id        String    @id @default(uuid())
  number    Int
  title     String?
  coverImage String?
  titleId   String
  releaseAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  titleRef    Title        @relation(fields: [titleId], references: [id], onDelete: Cascade)
  userVolumes UserVolume[]

  @@unique([titleId, number])
  @@index([releaseAt])
  @@map("volumes")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userRoles              UserRole[]
  userVolumes            UserVolume[]
  notificationPreferences NotificationPreference[]

  @@map("users")
}

enum Role {
  ADMIN
  USER
}

model UserRole {
  id     String @id @default(uuid())
  userId String
  role   Role

  user User @relation(fields: [userId], references: [id], onDelete: Restrict)

  @@unique([userId, role])
  @@map("user_roles")
}

model UserVolume {
  id       String  @id @default(uuid())
  userId   String
  volumeId String
  owned    Boolean @default(false)
  notified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Restrict)
  volume Volume @relation(fields: [volumeId], references: [id], onDelete: Restrict)

  @@unique([userId, volumeId])
  @@map("user_volumes")
}

model NotificationPreference {
  id        String   @id @default(uuid())
  userId    String
  titleId   String
  emailOnNewVolume Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  title Title @relation(fields: [titleId], references: [id], onDelete: Cascade)

  @@unique([userId, titleId])
  @@map("notification_preferences")
}
